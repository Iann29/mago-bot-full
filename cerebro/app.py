# /cerebro/app.py
# M√≥dulo central para coordena√ß√£o da aplica√ß√£o

import time
import tkinter as tk
import sys
import os
from typing import Optional, Dict, Any

# Adiciona a raiz do projeto ao PYTHONPATH para garantir importa√ß√µes corretas
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if project_root not in sys.path:
    sys.path.append(project_root)

from adb_monitor import setup_adb_monitor_in_app, cleanup_adb_monitor_on_exit
from thread_terminator import wait_for_thread_termination, terminate_all_daemon_threads
from auth.login_ui import start_login_window
from ADBmanager import adb_manager
from screenVision.screenshotMain import config as screenshot_config
from cerebro.ui import HayDayTestApp, show_emulator_closed_message
from cerebro.state import initialize_state_manager, stop_state_monitoring
from cerebro.capture import start_screenshot_capture, stop_screenshot_capture, capture_thread

# --- Configura√ß√µes Lidas do JSON ---
TARGET_FPS = screenshot_config.get("target_fps", 1)  # Pega do CFG, default 1

def initialize_app():
    """
    Inicializa componentes principais da aplica√ß√£o.
    
    Returns:
        bool: True se inicializa√ß√£o foi bem sucedida, False caso contr√°rio
    """
    # Inicializa o gerenciador de estados
    initialize_state_manager()
    
    return True

def cleanup_app():
    """Limpa recursos e encerra threads antes de fechar a aplica√ß√£o."""
    print("üíªüîí MAIN: Aplicativo est√° sendo fechado...")
    
    # Limpa o monitor ADB
    cleanup_adb_monitor_on_exit()
    print("üíª‚èπÔ∏è MAIN: Monitoramento de conex√£o ADB encerrado.")
    
    # Para o monitoramento de estados
    print("üíª‚èπÔ∏è MAIN: Parando monitoramento de estados...")
    stop_state_monitoring()
    
    # Para a interface gr√°fica (se houver)
    print("üíªüö´ MAIN: Interface encerrada.")
    
    # Sinaliza para a thread de captura parar
    print("üíª‚õî MAIN: Sinalizando para thread de captura parar...")
    stop_screenshot_capture()
    
    # Para o monitoramento de estados (redundante mas seguro)
    print("üíª‚èπÔ∏è MAIN: Parando monitoramento de estados...")
    
    # Aguarda a thread de captura encerrar
    print("üíª‚è∏Ô∏è MAIN: Aguardando a thread de captura encerrar...")
    if capture_thread and capture_thread.is_alive():
        wait_for_thread_termination(capture_thread, timeout=2.0)
    
    # Finaliza threads daemon remanescentes
    terminate_all_daemon_threads()
    
    print("üíª‚ú® MAIN: Programa encerrado.")

def start_app_with_auth():
    """
    Inicia a aplica√ß√£o com autentica√ß√£o.
    
    Returns:
        int: C√≥digo de sa√≠da da aplica√ß√£o (0 para sucesso)
    """
    # Mostra janela de login e aguarda autentica√ß√£o
    print("üåü--- Iniciando HayDay Test Tool ---üåü")
    print("üîê Iniciando autentica√ß√£o...")
    
    # Invoca o sistema de autentica√ß√£o
    user_data = start_login_window()
    
    # Se autentica√ß√£o falhou, encerra
    if not user_data:
        print("‚ùå Autentica√ß√£o falhou. Encerrando aplica√ß√£o.")
        return 1
    
    # Autentica√ß√£o bem-sucedida, continua com a aplica√ß√£o
    print(f"‚úÖ Usu√°rio {user_data['username']} autenticado com sucesso!")
    
    # Inicia a aplica√ß√£o principal
    return run_main_app(user_data)

def run_main_app(user_data: Dict[str, Any]) -> int:
    """
    Executa a aplica√ß√£o principal ap√≥s autentica√ß√£o bem-sucedida.
    
    Args:
        user_data: Dados do usu√°rio autenticado
        
    Returns:
        int: C√≥digo de sa√≠da da aplica√ß√£o (0 para sucesso)
    """
    # Exibe configura√ß√µes
    print(f"‚öôÔ∏è Configura√ß√µes: FPS={TARGET_FPS} (do screenshotCFG.json)")
    
    # Exibe mensagem se o emulador estiver fechado
    retry_count = 0
    max_retries = 3
    
    while retry_count < max_retries:
        # Tenta conectar ao emulador
        if adb_manager.connect_first_device():
            # Obt√©m o dispositivo conectado
            device = adb_manager.get_device()
            if device:
                # Inicializa a aplica√ß√£o
                if initialize_app():
                    try:
                        # Identifica o usu√°rio para transmiss√£o
                        username = user_data.get('html_id', user_data.get('username', ''))
                        print(f"üíªüìÅ Identificador de tela para transmiss√£o: {username}")
                        
                        # Inicia a thread de captura com username
                        start_screenshot_capture(TARGET_FPS, device, username)
                        
                        # Cria a interface gr√°fica
                        root = tk.Tk()
                        app = HayDayTestApp(root, user_data)
                        
                        # Configura√ß√£o do monitor ADB - deve ser feita AP√ìS criar a app
                        setup_adb_monitor_in_app(app)
                        
                        # Configura o callback de fechamento
                        root.protocol("WM_DELETE_WINDOW", lambda: on_closing(root))
                        
                        # Inicia o loop principal da interface
                        root.mainloop()
                        
                        # Limpa recursos antes de sair
                        cleanup_app()
                        return 0
                    except Exception as e:
                        print(f"‚ùå Erro ao executar aplica√ß√£o: {e}")
                        cleanup_app()
                        return 1
                else:
                    print("‚ùå Falha ao inicializar a aplica√ß√£o.")
                    return 1
            else:
                print("‚ùå Dispositivo ADB n√£o dispon√≠vel ap√≥s conex√£o.")
        
        # Se chegou aqui, n√£o conseguiu conectar ou inicializar
        retry_count += 1
        
        # Pergunta ao usu√°rio se deseja tentar novamente
        if not show_emulator_closed_message():
            print("üëã Usu√°rio optou por sair. Encerrando aplica√ß√£o.")
            return 0
        
        # Se usu√°rio quer tentar novamente mas j√° esgotou tentativas
        if retry_count >= max_retries:
            print(f"‚ùå M√°ximo de tentativas ({max_retries}) atingido. Encerrando aplica√ß√£o.")
            return 1
    
    # N√£o deveria chegar aqui, mas por seguran√ßa
    return 1

def on_closing(root: tk.Tk) -> None:
    """
    Trata o fechamento da janela principal.
    
    Args:
        root: Objeto raiz do Tkinter
    """
    # Pergunta ao usu√°rio se deseja realmente sair
    if tk.messagebox.askokcancel("Sair", "Deseja realmente sair da aplica√ß√£o?"):
        # Destroi a janela para encerrar o mainloop
        root.destroy()
