# /cerebro/app.py
# M√≥dulo central para coordena√ß√£o da aplica√ß√£o

import time
import tkinter as tk
import sys
import os
from typing import Optional, Dict, Any

# Adiciona a raiz do projeto ao PYTHONPATH para garantir importa√ß√µes corretas
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if project_root not in sys.path:
    sys.path.append(project_root)

# Agora usamos diretamente o ADBManager em vez do adb_monitor
# Esta abordagem elimina a duplica√ß√£o de c√≥digo
from thread_terminator import wait_for_thread_termination, terminate_all_daemon_threads
from ADBmanager import adb_manager
from screenVision.screenshotMain import config as screenshot_config
from cerebro.ui import HayDayTestApp, show_emulator_closed_message
from cerebro.state import initialize_state_manager, stop_state_monitoring
from cerebro.capture import start_screenshot_capture, stop_screenshot_capture, capture_thread

# --- Configura√ß√µes Lidas do JSON ---
TARGET_FPS = screenshot_config.get("target_fps", 1)  # Pega do CFG, default 1

def initialize_app():
    """
    Inicializa componentes principais da aplica√ß√£o.
    
    Returns:
        bool: True se inicializa√ß√£o foi bem sucedida, False caso contr√°rio
    """
    # Inicializa o gerenciador de estados
    initialize_state_manager()
    
    return True

def cleanup_app():
    """Limpa recursos e encerra threads antes de fechar a aplica√ß√£o."""
    print("Aplicativo est√° sendo fechado...")
    
    # Limpa o monitor ADB
    cleanup_adb_monitor_on_exit()
    print("Monitoramento de conex√£o ADB encerrado.")
    
    # Para o monitoramento de estados
    print("Parando monitoramento de estados...")
    stop_state_monitoring()
    
    # Para a interface gr√°fica (se houver)
    print("Interface encerrada.")
    
    # Sinaliza para a thread de captura parar
    print("Sinalizando para thread de captura parar...")
    stop_screenshot_capture()
    
    # Para o monitoramento de estados (redundante mas seguro)
    print("Parando monitoramento de estados...")
    
    # Aguarda a thread de captura encerrar
    print("Aguardando a thread de captura encerrar...")
    if capture_thread and capture_thread.is_alive():
        wait_for_thread_termination(capture_thread, timeout=2.0)
    
    # Finaliza threads daemon remanescentes
    terminate_all_daemon_threads()
    
    print("Programa encerrado.")

def run_main_app() -> int:
    """
    Executa a aplica√ß√£o principal.
    
    Returns:
        int: C√≥digo de sa√≠da da aplica√ß√£o (0 para sucesso)
    """
    # Remove configuration log
    # Exibe configura√ß√µes
    # print(f"Configura√ß√µes: FPS={TARGET_FPS} (do screenshotCFG.json)")
    
    # Exibe mensagem se o emulador estiver fechado
    retry_count = 0
    max_retries = 3
    
    while retry_count < max_retries:
        # Tenta conectar ao emulador
        if adb_manager.connect_first_device():
            # Obt√©m o dispositivo conectado
            device = adb_manager.get_device()
            if device:
                # Inicializa a aplica√ß√£o
                if initialize_app():
                    try:
                        # Inicia a thread de captura
                        start_screenshot_capture(TARGET_FPS, device)
                        
                        # Cria a interface gr√°fica
                        root = tk.Tk()
                        app = HayDayTestApp(root)
                        
                        # Configura√ß√£o do monitor ADB - deve ser feita AP√ìS criar a app
                        setup_adb_monitor_in_app(app)
                        
                        # Configura o callback de fechamento
                        root.protocol("WM_DELETE_WINDOW", lambda: on_closing(root, app))
                        
                        # Inicia o loop principal da interface
                        root.mainloop()
                        
                        # Limpa recursos antes de sair
                        cleanup_app()
                        return 0
                    except Exception as e:
                        print(f"‚ùå Erro ao executar aplica√ß√£o: {e}")
                        cleanup_app()
                        return 1
                else:
                    print("‚ùå Falha ao inicializar a aplica√ß√£o.")
                    return 1
            else:
                print("‚ùå Dispositivo ADB n√£o dispon√≠vel ap√≥s conex√£o.")
        
        # Se chegou aqui, n√£o conseguiu conectar ou inicializar
        retry_count += 1
        
        # Pergunta ao usu√°rio se deseja tentar novamente
        if not show_emulator_closed_message():
            print("üëã Usu√°rio optou por sair. Encerrando aplica√ß√£o.")
            return 0
        
        # Se usu√°rio quer tentar novamente mas j√° esgotou tentativas
        if retry_count >= max_retries:
            print(f"‚ùå M√°ximo de tentativas ({max_retries}) atingido. Encerrando aplica√ß√£o.")
            return 1
    
    # N√£o deveria chegar aqui, mas por seguran√ßa
    return 1

def on_closing(root: tk.Tk, app=None) -> None:
    """
    Trata o fechamento da janela principal.
    
    Args:
        root: Objeto raiz do Tkinter
        app: Inst√¢ncia da aplica√ß√£o HayDayTestApp
    """
    # Pergunta ao usu√°rio se deseja realmente sair
    if tk.messagebox.askokcancel("Sair", "Deseja realmente sair da aplica√ß√£o?"):
        # Notifica a aplica√ß√£o para limpar recursos da UI
        if app is not None:
            try:
                app.on_close()
            except Exception as e:
                print(f"Erro ao fechar a aplica√ß√£o: {e}")
        
        # Destroi a janela para encerrar o mainloop
        root.destroy()


# --- Fun√ß√µes de substitui√ß√£o do antigo adb_monitor.py ---
# Estas fun√ß√µes usam diretamente o ADBManager para evitar duplica√ß√£o de c√≥digo

def setup_adb_monitor_in_app(app):
    """
    Configura a verifica√ß√£o de status ADB para o aplicativo HayDayTestApp.
    
    Args:
        app: Inst√¢ncia da classe HayDayTestApp
    """
    # Adiciona atributo para rastrear status do emulador se n√£o existir
    if not hasattr(app, 'emulator_connection_lost'):
        app.emulator_connection_lost = False
    
    # Faz uma verifica√ß√£o inicial do status
    # O resto das verifica√ß√µes ser√° feito via bot√£o na interface
    app.check_emulator_status()


def cleanup_adb_monitor_on_exit():
    """
    Limpa recursos relacionados ao ADB ao encerrar a aplica√ß√£o.
    """
    # A thread de monitoramento n√£o existe mais, ent√£o n√£o precisamos par√°-la
    # Esse m√©todo est√° mantido por compatibilidade com o c√≥digo existente
    print("ADB: Liberando recursos")


def on_emulator_connected(app, device_serial):
    """
    Callback chamado quando o emulador √© conectado/reconectado.
    """
    if not hasattr(app, 'root') or not app.root.winfo_exists():
        return  # Janela foi fechada
        
    # Executa opera√ß√µes na thread do Tkinter
    app.root.after(0, lambda: handle_emulator_connected(app, device_serial))


def handle_emulator_connected(app, device_serial):
    """
    Manipula o evento de conex√£o do emulador na thread da interface gr√°fica.
    """
    try:
        # Atualiza a interface para refletir a conex√£o
        app.emulator_connection_lost = False
        app.status_label.config(text="Conectado ‚úì", foreground="green")
        app.device_label.config(text=f"Dispositivo: {device_serial}")
        
        # Obt√©m a refer√™ncia ao dispositivo
        app.connected_device = adb_manager.get_device()
    except Exception as e:
        print(f"Erro ao processar conex√£o do emulador: {e}")


def on_emulator_disconnected(app):
    """
    Callback chamado quando o emulador √© desconectado.
    """
    # Agenda para execu√ß√£o na thread da interface
    if hasattr(app, 'root') and app.root.winfo_exists():
        app.root.after(0, lambda: handle_emulator_disconnected(app))


def handle_emulator_disconnected(app):
    """
    Manipula o evento de desconex√£o do emulador na thread da interface gr√°fica.
    """
    try:
        import winsound
        winsound.PlaySound("SystemExclamation", winsound.SND_ASYNC)
    except Exception:
        pass  # Ignora erros de som
        
    app.emulator_connection_lost = True
    app.connected_device = None
    app.status_label.config(text="Desconectado ‚úó", foreground="red")
    app.device_label.config(text="Dispositivo: Nenhum")
