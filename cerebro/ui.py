# /cerebro/ui.py
# M√≥dulo para a interface gr√°fica do aplicativo

import tkinter as tk
from tkinter import ttk, messagebox
import os
import time
import threading
import winsound
from PIL import Image, ImageTk
from typing import Optional, Dict, Any, Callable

from ADBmanager import adb_manager
from screenVision.transmitter import transmitter
from stateManager import GameState
from cerebro.capture import screenshot_queue

class HayDayTestApp:
    """Classe principal da interface gr√°fica do aplicativo."""
    
    # Dicion√°rio de kits dispon√≠veis e seus respectivos m√≥dulos
    KITS = {
        'Celeiro': 'kit_celeiro',
        'Terra': 'kit_terra',
        'Silo': 'kit_silo',
        'Serra': 'kit_serra',
        'Dinamite': 'kit_dinamite',
        'Machado': 'kit_machado',
        'P√°': 'kit_pa',
        'Add Cliente': 'addCliente',
        'Verificar Lucro': 'verificarLucro'
    }
    
    def __init__(self, root):
        """
        Inicializa a interface gr√°fica.
        
        Args:
            root: Elemento raiz do Tkinter
        """
        self.root = root
        self.root.title("HayDay Test Tool")
        self.root.geometry("700x860")
        self.root.resizable(True, True)
        
        # Configurar tema escuro com cores modernas
        self.configure_theme()
        
        # Vari√°veis de controle
        self.adb_manager_instance = None
        self.connected_device = None
        self.emulator_connection_lost = False
        
        # Flag para controlar se a interface est√° ativa
        self.ui_active = True
        self.after_ids = []  # Lista para armazenar os IDs de chamadas after()
        
        # Vari√°veis para a √°rea de adicionar cliente
        self.client_tag_var = tk.StringVar()
        
        # Vari√°vel para controlar o modo Turbo
        self.turbo_mode = tk.BooleanVar(value=False)
        
        # Configurar a interface
        self.setup_ui()
        
        # Inicializar ADB ao abrir
        self.initialize_adb()
        
        # Registrar callbacks no ADBManager para detec√ß√£o proativa
        adb_manager.register_connection_callback(self.on_emulator_connected)
        adb_manager.register_disconnect_callback(self.on_emulator_disconnected)
        
        # Iniciar monitoramento de conex√£o
        adb_manager.start_connection_monitoring()
    
    def configure_theme(self):
        """Configura o tema e as cores para a interface"""
        # Cores mais modernas e atraentes
        bg_color = "#1e1e2e"  # Fundo principal mais escuro
        fg_color = "#cdd6f4"  # Texto mais suave
        accent_color = "#89b4fa"  # Azul suave
        frame_bg = "#313244"  # Fundo para frames
        button_bg = "#89dceb"  # Cor vibrante para bot√µes
        button_active = "#94e2d5"  # Cor quando bot√£o est√° ativo
        switch_on = "#a6e3a1"  # Verde para o switch ativado
        
        # Configura cores para a janela principal
        self.root.configure(bg=bg_color)
        
        # Configura estilo para os widgets
        style = ttk.Style()
        
        # Configura√ß√µes gerais
        style.configure(".", background=bg_color, foreground=fg_color)
        style.configure("TFrame", background=bg_color)
        style.configure("TLabel", background=bg_color, foreground=fg_color)
        
        # Estilo espec√≠fico para campos de entrada com texto ESCURO
        style.configure("TEntry", 
                       fieldbackground="white", 
                       foreground="#11111b",  # Texto escuro para contrastar com o fundo claro
                       insertcolor=accent_color)  # Cor do cursor de inser√ß√£o de texto
        
        # Bot√µes estilizados
        style.configure("TButton", background=button_bg, foreground="#11111b")
        style.map("TButton", 
                  background=[("active", button_active), ("pressed", "#74c7ec")],
                  foreground=[("active", "#181825")])
        
        # LabelFrame com bordas mais suaves e cores escuras
        style.configure("TLabelframe", background=bg_color)
        style.configure("TLabelframe.Label", background=bg_color, foreground=accent_color, font=("Segoe UI", 10, "bold"))
        
        # Bot√£o destacado com cores vibrantes
        style.configure("Accent.TButton", background=button_bg, foreground="#11111b")
        style.map("Accent.TButton", 
                  background=[("active", button_active), ("pressed", "#74c7ec")],
                  foreground=[("active", "#181825")])
        
        # Estilo para o checkbutton do modo Turbo
        style.configure("Switch.TCheckbutton",
                        background=bg_color,
                        foreground=fg_color)
        style.map("Switch.TCheckbutton",
                 foreground=[("selected", switch_on)],
                 background=[("active", bg_color)])
    
    def setup_ui(self):
        """Configura todos os elementos da interface"""
        # Frame principal com padding
        main_frame = ttk.Frame(self.root, padding=15)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Header mais compacto com logo e t√≠tulo
        self.setup_header(main_frame)
        
        # √Årea de status em um √∫nico frame compacto
        self.setup_status_area(main_frame)
        
        # Frame de estado do jogo
        self.setup_game_state_area(main_frame)
        
        # √Årea para adicionar cliente
        self.setup_add_client_area(main_frame)
        
        # √Årea de a√ß√µes para venda de kits
        self.setup_actions_area(main_frame)
        
        # Inicia o timer para atualizar a UI
        self.schedule_ui_update(self.update_state_time, 1000)  # Atualiza tempo de estado a cada 1s
        
        # Registra callback para mudan√ßas de estado
        from cerebro.state import register_state_callback
        register_state_callback(self.on_state_change)
        self.log("üîî‚úÖ Callback de estado registrado na UI")
    
    def setup_header(self, parent_frame):
        """Configura√ß√£o do cabe√ßalho da aplica√ß√£o"""
        header_frame = ttk.Frame(parent_frame)
        header_frame.pack(fill=tk.X, pady=(0, 15))
        
        # T√≠tulo e subt√≠tulo em layout horizontal
        title_frame = ttk.Frame(header_frame)
        title_frame.pack(pady=5)
        
        title_label = ttk.Label(title_frame, text="@magodohayday", font=("Segoe UI", 20, "bold"))
        title_label.pack(side=tk.LEFT, padx=(0, 10))
        
        subtitle = ttk.Label(title_frame, text="Bot de Automa√ß√£o", font=("Segoe UI", 12))
        subtitle.pack(side=tk.LEFT, padx=5, pady=8)
    
    def setup_status_area(self, parent_frame):
        """Configura√ß√£o da √°rea de status compacta"""
        status_frame = ttk.LabelFrame(parent_frame, text="Status do Sistema", padding=12)
        status_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Grid para organizar status e bot√£o
        status_grid = ttk.Frame(status_frame)
        status_grid.pack(fill=tk.X, expand=True, padx=5, pady=5)
        
        # √Årea de conex√£o
        conn_frame = ttk.Frame(status_grid)
        conn_frame.grid(row=0, column=0, sticky="w", padx=10)
        
        self.status_label = ttk.Label(conn_frame, text="N√£o conectado", font=("Segoe UI", 9, "bold"))
        self.status_label.pack(side=tk.LEFT, padx=(0, 10))
        
        self.device_label = ttk.Label(conn_frame, text="Dispositivo: Nenhum")
        self.device_label.pack(side=tk.LEFT)
        
        # Bot√£o de verificar status √† direita
        self.check_status_button = ttk.Button(
            status_grid, 
            text="Verificar Conex√£o", 
            command=self.check_emulator_status,
            style="Accent.TButton"
        )
        self.check_status_button.grid(row=0, column=1, sticky="e", padx=10)
        
        # Configurar pesos das colunas
        status_grid.columnconfigure(0, weight=1)
        status_grid.columnconfigure(1, weight=0)
    
    def setup_game_state_area(self, parent_frame):
        """Configura√ß√£o da √°rea de estado do jogo"""
        state_frame = ttk.LabelFrame(parent_frame, text="Estado do Jogo", padding=12)
        state_frame.pack(fill=tk.X, padx=10, pady=10)
        
        state_grid = ttk.Frame(state_frame)
        state_grid.pack(fill=tk.X, expand=True, padx=5, pady=5)
        
        self.state_label = ttk.Label(state_grid, text="Estado atual: Desconhecido", font=("Segoe UI", 9, "bold"))
        self.state_label.grid(row=0, column=0, sticky="w", padx=10)
        
        self.state_time_label = ttk.Label(state_grid, text="Tempo no estado: 0s")
        self.state_time_label.grid(row=0, column=1, sticky="e", padx=10)
        
        # Configurar pesos das colunas
        state_grid.columnconfigure(0, weight=1)
        state_grid.columnconfigure(1, weight=0)
    
    def setup_add_client_area(self, parent_frame):
        """Configura a √°rea para adicionar cliente na interface principal"""
        client_frame = ttk.LabelFrame(parent_frame, text="Adicionar Cliente", padding=12)
        client_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Frame interno para organiza√ß√£o
        inner_frame = ttk.Frame(client_frame)
        inner_frame.pack(fill=tk.X, expand=True, padx=5, pady=5)
        
        # Label de instru√ß√£o
        instruction_label = ttk.Label(inner_frame, text="Tag do cliente:", font=("Segoe UI", 10))
        instruction_label.grid(row=0, column=0, sticky="w", padx=5, pady=5)
        
        # Campo de texto para a tag
        tag_entry = ttk.Entry(inner_frame, textvariable=self.client_tag_var, width=30)
        tag_entry.grid(row=0, column=1, sticky="ew", padx=5, pady=5)
        
        # Bot√£o de adicionar
        add_button = ttk.Button(
            inner_frame, 
            text="Adicionar", 
            command=self.add_client,
            style="Accent.TButton",
            width=15
        )
        add_button.grid(row=0, column=2, sticky="e", padx=5, pady=5)
        
        # Configurar pesos das colunas
        inner_frame.columnconfigure(0, weight=0)  # Label n√£o precisa expandir
        inner_frame.columnconfigure(1, weight=1)  # Campo de texto expande
        inner_frame.columnconfigure(2, weight=0)  # Bot√£o n√£o precisa expandir
    
    def setup_actions_area(self, parent_frame):
        """Configura√ß√£o da √°rea de bot√µes de a√ß√£o"""
        actions_frame = ttk.LabelFrame(parent_frame, text="Bot√µes de Venda de Kits", padding=12)
        actions_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Frame para o bot√£o Turbo
        turbo_frame = ttk.Frame(actions_frame)
        turbo_frame.pack(fill=tk.X, padx=5, pady=(5, 10))
        
        # Label para o Turbo
        turbo_label = ttk.Label(turbo_frame, text="Turbo:", font=("Segoe UI", 10, "bold"))
        turbo_label.pack(side=tk.LEFT, padx=(5, 10))
        
        # Bot√£o de altern√¢ncia para o Turbo
        self.turbo_switch = ttk.Checkbutton(
            turbo_frame, 
            text="ON/OFF",
            variable=self.turbo_mode,
            onvalue=True,
            offvalue=False,
            style="Switch.TCheckbutton"
        )
        self.turbo_switch.pack(side=tk.LEFT)
        
        # Grid melhorado para bot√µes
        buttons_grid = ttk.Frame(actions_frame)
        buttons_grid.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Configurar o grid para 3 colunas
        num_cols = 3
        row, col = 0, 0
        
        # Adicionar bot√µes para cada kit dispon√≠vel com visual melhorado
        for kit_name, module_name in self.KITS.items():
            # Pula o 'Add Cliente' e 'Verificar Lucro' que ser√£o tratados separadamente
            if kit_name == "Add Cliente" or kit_name == "Verificar Lucro":
                continue
                
            button_frame = ttk.Frame(buttons_grid, padding=5)
            button_frame.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
            
            button = ttk.Button(
                button_frame, 
                text=f"Kit {kit_name}", 
                command=lambda name=kit_name, module=module_name: self.run_kit(name, module),
                style="TButton"
            )
            button.pack(fill=tk.BOTH, expand=True, ipady=8)
            
            # Avan√ßar para a pr√≥xima posi√ß√£o no grid
            col += 1
            if col >= num_cols:
                col = 0
                row += 1
        
        # Configurar pesos das colunas e linhas para distribui√ß√£o uniforme
        for i in range(num_cols):
            buttons_grid.columnconfigure(i, weight=1)
        
        for i in range(row + 1):
            buttons_grid.rowconfigure(i, weight=1)
            
        # Adicionar o bot√£o "Verificar lucro de conta" em um frame separado
        verify_profit_frame = ttk.LabelFrame(parent_frame, text="Verifica√ß√£o de Lucro", padding=12)
        verify_profit_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Frame interno para o bot√£o
        inner_frame = ttk.Frame(verify_profit_frame)
        inner_frame.pack(fill=tk.X, expand=True, padx=5, pady=5)
        
        # Bot√£o de verificar lucro com estilo destacado
        profit_button = ttk.Button(
            inner_frame, 
            text="Verificar Lucro de Conta", 
            command=lambda: self.run_kit("Verificar Lucro", self.KITS["Verificar Lucro"]),
            style="Accent.TButton",
            width=25
        )
        profit_button.pack(pady=10)
    
    def add_client(self):
        """Fun√ß√£o para adicionar cliente a partir da interface integrada"""
        customer_id = self.client_tag_var.get().strip()
        if not customer_id:
            messagebox.showwarning("Aviso", "Por favor, digite uma tag v√°lida!")
            return
        
        # Obt√©m o m√≥dulo de adicionar cliente
        module_name = self.KITS["Add Cliente"]
        
        # Inicia a thread para adicionar o cliente
        if not self.connected_device:
            messagebox.showerror("Erro", "Nenhum dispositivo conectado!")
            return
            
        kit_thread = threading.Thread(
            target=lambda: self._run_kit_thread("Add Cliente", module_name, customer_id)
        )
        kit_thread.daemon = True
        kit_thread.start()
        
        # Limpa o campo de texto ap√≥s iniciar o processo
        self.client_tag_var.set("")
    
    def log(self, message):
        """Registra mensagem no console em vez da interface"""
        print(message)
    
    def initialize_adb(self):
        """Inicializa e conecta ao ADB"""
        # Usa a inst√¢ncia singleton existente
        self.adb_manager_instance = adb_manager
        
        # Tenta conectar
        if self.adb_manager_instance.connect_first_device():
            # Obt√©m o dispositivo e o serial
            self.connected_device = self.adb_manager_instance.get_device()
            device_serial = self.adb_manager_instance.get_target_serial()
            
            self.status_label.config(text="Conectado ‚úì", foreground="#a6e3a1")  # Verde
            self.device_label.config(text=f"Dispositivo: {device_serial}")
            
            print(f"üì±üîå Inicializando conex√£o ADB...")
            return True
        else:
            self.status_label.config(text="N√£o conectado ‚úó", foreground="#f38ba8")  # Vermelho
            self.device_label.config(text="Dispositivo: Nenhum")
            return False
    
    def on_emulator_connected(self, device_serial):
        """Callback chamado quando o emulador √© conectado/reconectado."""
        # Agenda para execu√ß√£o na thread da interface
        self.root.after(0, lambda: self._handle_emulator_connected(device_serial))
    
    def _handle_emulator_connected(self, device_serial):
        """Manipula o evento de conex√£o do emulador na thread da interface gr√°fica."""
        # Atualiza a interface para refletir a conex√£o
        self.emulator_connection_lost = False
        self.status_label.config(text="Conectado ‚úì", foreground="#a6e3a1")  # Verde
        self.device_label.config(text=f"Dispositivo: {device_serial}")
        
        # Obt√©m a refer√™ncia ao dispositivo
        self.connected_device = self.adb_manager_instance.get_device()
    
    def on_emulator_disconnected(self):
        """Callback chamado quando o emulador √© desconectado."""
        # Agenda para execu√ß√£o na thread da interface
        self.root.after(0, self._handle_emulator_disconnected)
    
    def _handle_emulator_disconnected(self):
        """Manipula o evento de desconex√£o do emulador na thread da interface gr√°fica."""
        # Toca um som e atualiza a UI
        try:
            winsound.PlaySound("SystemExclamation", winsound.SND_ASYNC)
        except Exception:
            pass  # Ignora erros de som
            
        self.emulator_connection_lost = True
        self.connected_device = None
        self.status_label.config(text="Desconectado ‚úó", foreground="#f38ba8")  # Vermelho
        self.device_label.config(text="Dispositivo: Nenhum")
        
        # Mostra popup uma √∫nica vez se a conex√£o foi perdida
        message = "A conex√£o com o emulador foi perdida. Verifique se o emulador est√° em execu√ß√£o."
        messagebox.showwarning("Conex√£o Perdida", message)
    
    def run_kit(self, kit_name, module_name):
        """Executa a venda do kit especificado"""
        if not self.connected_device:
            messagebox.showerror("Erro", "Nenhum dispositivo conectado!")
            return
        
        # Inicia a thread para executar o kit
        kit_thread = threading.Thread(target=lambda: self._run_kit_thread(kit_name, module_name))
        kit_thread.daemon = True
        kit_thread.start()
    
    def _run_kit_thread(self, kit_name, module_name, customer_id=None):
        """Fun√ß√£o que executa a venda do kit ou opera√ß√£o em thread separada"""
        try:
            # Mensagem apropriada dependendo da opera√ß√£o
            if kit_name == "Add Cliente":
                self.log(f"Iniciando adi√ß√£o de cliente com tag: {customer_id}...")
            else:
                self.log(f"Iniciando venda do Kit {kit_name}...")
            
            # Verificar se o modo Turbo est√° ativado para os kits compat√≠veis
            if hasattr(self, 'turbo_mode') and self.turbo_mode.get():
                # Kit Terra no modo Turbo
                if kit_name == "Terra":
                    try:
                        # Tenta importar e executar diretamente o m√≥dulo turbo
                        import execution.turbo.terraturbo as turbo_module
                        self.log(f"Modo TURBO ativado para o Kit {kit_name}!")
                        result = turbo_module.run()
                        
                        # Mensagens de resultado
                        if result:
                            self.log(f"‚úÖ Kit {kit_name} (TURBO) vendido com sucesso!")
                            messagebox.showinfo("Venda de Kit", f"Kit {kit_name} vendido com sucesso no modo TURBO!")
                        else:
                            self.log(f"‚ö†Ô∏è Kit {kit_name} (TURBO): Opera√ß√£o finalizada")
                            messagebox.showinfo("Venda de Kit", f"Opera√ß√£o de venda do Kit {kit_name} (TURBO) finalizada.")
                        return
                    except Exception as e:
                        self.log(f"‚ùå Erro no modo TURBO: {e} - Continuando com modo normal")
                
                # Kit Celeiro no modo Turbo
                elif kit_name == "Celeiro":
                    try:
                        # Tenta importar e executar diretamente o m√≥dulo turbo
                        import execution.turbo.celeiroturbo as turbo_module
                        self.log(f"Modo TURBO ativado para o Kit {kit_name}!")
                        result = turbo_module.run()
                        
                        # Mensagens de resultado
                        if result:
                            self.log(f"‚úÖ Kit {kit_name} (TURBO) vendido com sucesso!")
                            messagebox.showinfo("Venda de Kit", f"Kit {kit_name} vendido com sucesso no modo TURBO!")
                        else:
                            self.log(f"‚ö†Ô∏è Kit {kit_name} (TURBO): Opera√ß√£o finalizada")
                            messagebox.showinfo("Venda de Kit", f"Opera√ß√£o de venda do Kit {kit_name} (TURBO) finalizada.")
                        return
                    except Exception as e:
                        self.log(f"‚ùå Erro no modo TURBO: {e} - Continuando com modo normal")
            
            # Importa dinamicamente o m√≥dulo (fluxo normal)
            import importlib
            try:
                # Carrega o m√≥dulo da pasta execution
                kit_module = importlib.import_module(f'execution.{module_name}')
                
                # Verifica se o m√≥dulo tem uma fun√ß√£o run
                if hasattr(kit_module, 'run'):
                    # Executa com par√¢metro adicional se for adi√ß√£o de cliente
                    if kit_name == "Add Cliente" and customer_id:
                        result = kit_module.run(customer_id)
                    else:
                        result = kit_module.run()
                    
                    # Mensagens de resultado apropriadas
                    if result:
                        if kit_name == "Add Cliente":
                            self.log(f"‚úÖ Cliente {customer_id} adicionado com sucesso!")
                            messagebox.showinfo("Sucesso", f"Cliente com tag {customer_id} adicionado com sucesso!")
                        else:
                            self.log(f"‚úÖ Kit {kit_name} vendido com sucesso!")
                            messagebox.showinfo("Venda de Kit", f"Kit {kit_name} vendido com sucesso!")
                    else:
                        if kit_name == "Add Cliente":
                            self.log(f"‚ö†Ô∏è Adi√ß√£o de cliente {customer_id}: opera√ß√£o finalizada sem sucesso")
                            messagebox.showinfo("Resultado", f"Opera√ß√£o de adi√ß√£o do cliente finalizada sem sucesso.")
                        else:
                            self.log(f"‚ö†Ô∏è Kit {kit_name}: Opera√ß√£o finalizada")
                            messagebox.showinfo("Venda de Kit", f"Opera√ß√£o de venda do Kit {kit_name} finalizada.")
                else:
                    self.log(f"‚ùå M√≥dulo {module_name}: n√£o possui fun√ß√£o 'run'")
                    messagebox.showwarning("Erro de M√≥dulo", f"O m√≥dulo '{module_name}' n√£o possui fun√ß√£o 'run'")
            except Exception as e:
                self.log(f"‚ùå Erro ao carregar m√≥dulo {module_name}: {e}")
                messagebox.showerror("Erro de Importa√ß√£o", f"Erro ao carregar m√≥dulo '{module_name}': {e}")
        except Exception as e:
            self.log(f"‚ùå ERRO ao executar opera√ß√£o {kit_name}: {e}")
            messagebox.showerror("Erro na Opera√ß√£o", f"Ocorreu um erro: {e}")
    
    def schedule_ui_update(self, callback, delay_ms):
        """Agenda uma atualiza√ß√£o de UI com seguran√ßa"""
        if self.ui_active:
            after_id = self.root.after(delay_ms, callback)
            self.after_ids.append(after_id)
            return after_id
        return None
    
    def on_state_change(self, previous_state, new_state):
        """Callback chamado quando o estado do jogo muda"""
        # Atualiza a interface na thread da UI
        self.root.after(0, lambda: self._update_state_ui(previous_state, new_state))
    
    def _update_state_ui(self, previous_state, new_state):
        """Atualiza a UI com a mudan√ßa de estado"""
        # Destacar visualmente a mudan√ßa de estado com formata√ß√£o especial
        self.state_label.config(text=f"Estado atual: {new_state}")
        self.state_time_label.config(text="Tempo no estado: 0s")
        
        # Registra a mudan√ßa no console
        print(f"üîÑ Estado alterado: {previous_state} ‚Üí {new_state}")
    
    def update_state_time(self):
        """Atualiza o tempo desde a √∫ltima mudan√ßa de estado"""
        if not self.ui_active:
            return
        
        try:
            # Importa o state_manager para obter o tempo no estado atual
            from cerebro.state import state_manager
            
            if state_manager:
                # Obt√©m o tempo em segundos desde a √∫ltima mudan√ßa de estado
                duration = state_manager.get_state_duration()
                
                # Formata o tempo (pode ser formatado em minutos/horas se necess√°rio)
                duration_str = f"{int(duration)}s"
                
                # Atualiza o texto na interface
                self.state_time_label.config(text=f"Tempo no estado: {duration_str}")
        except Exception:
            # Ignora erros se a interface j√° estiver sendo destru√≠da
            pass
        
        # Reagenda a atualiza√ß√£o
        self.schedule_ui_update(self.update_state_time, 1000)
        
    def check_emulator_status(self):
        """Verifica o status do emulador quando o bot√£o √© clicado."""
        self.check_status_button.config(text="Verificando...", state="disabled")
        self.root.update_idletasks()  # Atualiza a UI imediatamente para mostrar o bot√£o desabilitado
        
        try:
            # Verifica se o emulador est√° conectado
            is_connected = adb_manager.is_connected()
            
            if is_connected:
                device_serial = adb_manager.get_target_serial()
                self.status_label.config(text="Conectado ‚úì", foreground="#a6e3a1")  # Verde
                self.device_label.config(text=f"Dispositivo: {device_serial}")
                
                # Atualiza o atributo connected_device
                self.connected_device = adb_manager.get_device()
                
                # Se estava marcado como desconectado antes, notifica reconex√£o
                if self.emulator_connection_lost:
                    self.emulator_connection_lost = False
                    self.log("üì±‚úÖ Emulador reconectado!")
                    try:
                        winsound.PlaySound("SystemAsterisk", winsound.SND_ASYNC)
                    except Exception:
                        pass
            else:
                self.status_label.config(text="Desconectado ‚úó", foreground="#f38ba8")  # Vermelho
                self.device_label.config(text="Dispositivo: Nenhum")
                self.connected_device = None
                
                # Se n√£o estava marcado como desconectado antes, notifica desconex√£o
                if not self.emulator_connection_lost:
                    self.emulator_connection_lost = True
                    self.log("üì±‚ùå Emulador desconectado!")
                    try:
                        winsound.PlaySound("SystemExclamation", winsound.SND_ASYNC)
                    except Exception:
                        pass
            
            # Exibe log de resultado
            status_text = "conectado" if is_connected else "desconectado"
            self.log(f"üîç Verifica√ß√£o de status: Emulador {status_text}")
        except Exception as e:
            self.log(f"‚ùå Erro ao verificar status: {e}")
            self.status_label.config(text="Erro ‚úó", foreground="#f38ba8")  # Vermelho
        finally:
            # Reativa o bot√£o
            self.check_status_button.config(text="Verificar Conex√£o", state="normal")
    
    def on_close(self):
        """Chamado quando a interface est√° sendo fechada"""
        # Marca a UI como inativa para evitar atualiza√ß√µes futuras
        self.ui_active = False
        
        # Cancela todos os agendamentos pendentes
        for after_id in self.after_ids:
            try:
                self.root.after_cancel(after_id)
            except Exception:
                pass
        
        # Limpa a lista de IDs
        self.after_ids.clear()

def show_emulator_closed_message():
    """
    Mostra uma mensagem amig√°vel com GIF animado quando o emulador est√° fechado e toca um som.
    
    Returns:
        bool: Se o usu√°rio quer continuar ou n√£o
    """
    # Tenta tocar um som para chamar aten√ß√£o
    try:
        winsound.PlaySound("SystemExclamation", winsound.SND_ASYNC)
    except Exception:
        pass  # Ignora erros de som
    
    # Cria janela de mensagem customizada
    message_window = tk.Toplevel()
    message_window.title("Emulador n√£o Detectado")
    message_window.geometry("450x400")
    message_window.resizable(False, False)
    message_window.grab_set()  # Faz janela modal
    
    # Centraliza na tela
    window_width = 450
    window_height = 400
    screen_width = message_window.winfo_screenwidth()
    screen_height = message_window.winfo_screenheight()
    position_x = int((screen_width - window_width) / 2)
    position_y = int((screen_height - window_height) / 2)
    message_window.geometry(f"{window_width}x{window_height}+{position_x}+{position_y}")
    
    # Verifica se existe o arquivo do GIF
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    gif_path = os.path.join(project_root, "assets", "emulator_error.gif")
    
    # Frame principal com padding
    main_frame = ttk.Frame(message_window, padding=20)
    main_frame.pack(fill=tk.BOTH, expand=True)
    
    # T√≠tulo
    title_label = ttk.Label(main_frame, text="Emulador N√£o Encontrado", font=("Helvetica", 16, "bold"))
    title_label.pack(pady=(0, 15))
    
    # Fun√ß√£o para animar o GIF se existir, caso contr√°rio mostra texto
    if os.path.exists(gif_path):
        # Carrega todas as frames do GIF
        gif = Image.open(gif_path)
        frames = []
        try:
            while True:
                frames.append(ImageTk.PhotoImage(gif.copy()))
                gif.seek(len(frames))  # Avan√ßa para o pr√≥ximo frame
        except EOFError:
            pass  # Fim do GIF
        
        # Label para mostrar o GIF
        gif_label = ttk.Label(main_frame)
        gif_label.pack(pady=10)
        
        def update_frame(index):
            frame = frames[index]
            gif_label.configure(image=frame)
            # L√≥gica para loop do GIF
            next_index = (index + 1) % len(frames)
            # Agenda pr√≥ximo frame (ajuste o tempo conforme necess√°rio, 100 = 0.1s)
            message_window.after(100, update_frame, next_index)
        
        # Inicia a anima√ß√£o do GIF
        if frames:
            update_frame(0)
    else:
        # Texto alternativo se o GIF n√£o existir
        info_text = "O emulador precisa estar aberto para o funcionamento da ferramenta."
        info_label = ttk.Label(main_frame, text=info_text, font=("Helvetica", 12), wraplength=350)
        info_label.pack(pady=30)
    
    # Mensagem de instru√ß√µes
    message_text = """
    Por favor, verifique se:
    
    1. O emulador est√° aberto e funcionando
    2. A conex√£o ADB est√° ativa (adb devices)
    3. O jogo HayDay est√° instalado
    
    Deseja tentar novamente?
    """
    message_label = ttk.Label(main_frame, text=message_text, justify="left", wraplength=380)
    message_label.pack(pady=10)
    
    # Vari√°vel para armazenar a resposta
    result = {"continue": False}
    
    # Fun√ß√£o para fechar a janela com resposta
    def on_button_click(continue_execution):
        result["continue"] = continue_execution
        message_window.destroy()
    
    # Frame para bot√µes
    button_frame = ttk.Frame(main_frame)
    button_frame.pack(pady=15)
    
    # Bot√µes
    retry_button = ttk.Button(button_frame, text="Tentar Novamente", command=lambda: on_button_click(True))
    retry_button.pack(side=tk.LEFT, padx=10)
    
    exit_button = ttk.Button(button_frame, text="Sair", command=lambda: on_button_click(False))
    exit_button.pack(side=tk.LEFT, padx=10)
    
    # Espera a resposta
    message_window.wait_window()
    
    return result["continue"]