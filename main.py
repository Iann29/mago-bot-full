# /main.py

import time
import threading
import queue
import sys # Para sair em caso de falha cr√≠tica
import tkinter as tk
from tkinter import ttk, messagebox
import os
import winsound  # For playing sounds on Windows
from PIL import Image, ImageTk  # Para trabalhar com imagens e GIFs

# Importa o m√≥dulo de monitoramento ADB
from adb_monitor import setup_adb_monitor_in_app, cleanup_adb_monitor_on_exit

# Adiciona a raiz do projeto ao PYTHONPATH para garantir importa√ß√µes corretas
project_root = os.path.dirname(os.path.abspath(__file__))
if project_root not in sys.path:
    sys.path.append(project_root)

# Importa√ß√µes do sistema de autentica√ß√£o
from auth.login_ui import start_login_window

# Importa√ß√µes dos m√≥dulos do projeto
from ADBmanager import adb_manager # Importa o SINGLETON adb_manager
from screenVision.screenshotMain import Screenshotter, config as screenshot_config 
from screenVision.transmitter import transmitter # Importa o transmissor para VPS
from adbutils import AdbDevice
from execution.template import run_test, find_template # Importa as fun√ß√µes do m√≥dulo de template
from execution.testnew import execute_masked_test # Importa a fun√ß√£o do m√≥dulo testnew.py
from stateManager import StateManager, GameState # Importa o gerenciador de estados

# --- Configura√ß√µes Lidas do JSON ---
TARGET_FPS = screenshot_config.get("target_fps", 1) # Pega do CFG, default 1

# --- Vari√°veis Globais (definidas no n√≠vel do m√≥dulo) ---
# Usar um tamanho maior pode ajudar a n√£o perder frames se o processamento for lento
screenshot_queue = queue.Queue(maxsize=5) 
stop_capture_thread = False  # Flag para parar a thread
capture_thread = None        # A thread de captura que ser√° inicializada
state_manager = None         # Gerenciador de estados do jogo

# --- Fun√ß√£o da Thread de Captura ---
def capture_worker(fps, adb_device: AdbDevice, username: str = None): 
    """Fun√ß√£o que roda em uma thread separada para capturar screenshots."""
    global stop_capture_thread
    
    # Inicializa o Screenshotter PASSANDO o device conectado
    # A inst√¢ncia do Screenshotter √© LOCAL para esta thread
    screenshotter = Screenshotter(adb_device=adb_device)
    
    # Configura o transmissor com o nome de usu√°rio
    if username:
        transmitter.set_username(username)
        print(f"üì°üë§ Transmissor configurado para usu√°rio: {username}")
    
    capture_interval = 1.0 / fps
    last_capture_time = time.time()
    consecutive_failures = 0 # Contador de falhas consecutivas
    max_failures = 5 # N√∫mero m√°ximo de falhas antes de parar a thread
    
    print(f"üì∑‚ñ∂Ô∏è CAPTURE_THREAD: Iniciada, capturando a ~{fps} FPS")

    while not stop_capture_thread:
        # A conex√£o √© estabelecida no in√≠cio.
        # Se cair, o screenshotter.capture() deve lan√ßar uma exce√ß√£o,
        # que ser√° tratada abaixo.
        # Removida a verifica√ß√£o adb_device.is_connected() e a tentativa de reconex√£o.

        # Tenta capturar e colocar na fila
        try:
            current_time = time.time()
            # L√≥gica para tentar manter o FPS alvo
            if current_time - last_capture_time >= capture_interval:
                time_before_capture = time.time() 
                
                # Tira screenshot (padr√£o OpenCV/BGR) e transmite para VPS
                screenshot = screenshotter.take_screenshot(use_pil=False, username=username, transmit=True)
                
                time_after_capture = time.time() 
                capture_duration = time_after_capture - time_before_capture
                
                # Atualiza o tempo da √∫ltima tentativa de captura
                last_capture_time = time_before_capture 

                if screenshot is not None:
                    consecutive_failures = 0 # Reseta contador de falhas
                    # Coloca na fila se tiver espa√ßo, sen√£o descarta a antiga
                    if screenshot_queue.full():
                        try: screenshot_queue.get_nowait() 
                        except queue.Empty: pass 
                    screenshot_queue.put(screenshot)
                    # print(f"CAPTURE_THREAD: Screenshot OK ({capture_duration:.3f}s). Fila: {screenshot_queue.qsize()}") # Debug
                else:
                    consecutive_failures += 1
                    print(f"üì∑‚ö†Ô∏è CAPTURE_THREAD: Falha na captura ({capture_duration:.3f}s) ({consecutive_failures}/{max_failures})")
                    if consecutive_failures >= max_failures:
                         print("üì∑‚ùå CAPTURE_THREAD: M√°ximo de falhas atingido. Encerrando thread")
                         stop_capture_thread = True
                         break # Sai do loop
                    time.sleep(0.5) # Pausa curta ap√≥s falha na captura

        except Exception as e:
            consecutive_failures += 1
            print(f"üì∑‚õî CAPTURE_THREAD: Erro inesperado: {e} ({consecutive_failures}/{max_failures})")
            if consecutive_failures >= max_failures:
                 print("üì∑‚ùå CAPTURE_THREAD: M√°ximo de falhas atingido. Encerrando thread")
                 stop_capture_thread = True
                 break # Sai do loop
            time.sleep(0.5) # Pausa curta ap√≥s falha na captura

        # Dormir para controlar o FPS e n√£o usar 100% CPU
        sleep_time = max(0.01, capture_interval - (time.time() - last_capture_time)) # Garante um sleep m√≠nimo
        time.sleep(sleep_time * 0.9) # Dorme 90% do tempo restante

    print("üì∑‚èπÔ∏è CAPTURE_THREAD: Encerrando...")

# --- Classe da Interface Gr√°fica ---
class HayDayTestApp:
    def __init__(self, root, user_data=None):
        self.root = root
        self.root.title("HayDay Test Tool")
        self.root.geometry("600x700")
        self.root.resizable(True, True)
        
        # Vari√°veis de controle
        self.adb_manager_instance = None
        self.connected_device = None
        self.emulator_connection_lost = False
        
        # Dados do usu√°rio autenticado
        self.user_data = user_data
        self.html_id = user_data.get("html_id") if user_data else None
        
        # Configurar a interface
        self.setup_ui()
        
        # Inicializar ADB ao abrir
        self.initialize_adb()
        
        # Registrar callbacks no ADBManager para detec√ß√£o proativa
        adb_manager.register_connection_callback(self.on_emulator_connected)
        adb_manager.register_disconnect_callback(self.on_emulator_disconnected)
        
        # Iniciar monitoramento de conex√£o
        adb_manager.start_connection_monitoring()
    
    def setup_ui(self):
        """Configura todos os elementos da interface"""
        # Frame principal
        main_frame = ttk.Frame(self.root, padding=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo com informa√ß√£o do usu√°rio
        title_text = "HayDay Test Tool"
        if self.html_id:
            # Extrai nome do usu√°rio do html_id (exemplo: "screen-ian" -> "Ian")
            user_name = self.html_id.replace("screen-", "").capitalize()
            title_text += f" - {user_name}"
            
        title_label = ttk.Label(main_frame, text=title_text, font=("Helvetica", 16, "bold"))
        title_label.pack(pady=10)
        
        # Frame de status
        status_frame = ttk.LabelFrame(main_frame, text="Status da Conex√£o", padding=10)
        status_frame.pack(fill=tk.X, pady=10)
        
        self.status_label = ttk.Label(status_frame, text="N√£o conectado")
        self.status_label.pack(pady=5)
        
        self.device_label = ttk.Label(status_frame, text="Dispositivo: Nenhum")
        self.device_label.pack(pady=5)
        
        # Frame de captura
        capture_frame = ttk.LabelFrame(main_frame, text="Status da Captura", padding=10)
        capture_frame.pack(fill=tk.X, pady=10)
        
        self.capture_status_label = ttk.Label(capture_frame, text="Thread de captura: Inativa")
        self.capture_status_label.pack(side=tk.LEFT, padx=5)
        
        self.capture_fps_label = ttk.Label(capture_frame, text="FPS: --")
        self.capture_fps_label.pack(side=tk.RIGHT, padx=5)
        
        # Frame de estado do jogo
        state_frame = ttk.LabelFrame(main_frame, text="Estado do Jogo", padding=10)
        state_frame.pack(fill=tk.X, pady=10)
        
        self.state_label = ttk.Label(state_frame, text="Estado atual: Desconhecido")
        self.state_label.pack(side=tk.LEFT, padx=5)
        
        self.state_time_label = ttk.Label(state_frame, text="Tempo no estado: 0s")
        self.state_time_label.pack(side=tk.RIGHT, padx=5)
        
        # Frame de status de transmiss√£o
        transmission_frame = ttk.LabelFrame(main_frame, text="Status da Transmiss√£o", padding=10)
        transmission_frame.pack(fill=tk.X, pady=10)
        
        self.transmission_status_label = ttk.Label(transmission_frame, text="Transmiss√£o: Inativa", foreground="gray")
        self.transmission_status_label.pack(side=tk.LEFT, padx=5)
        
        self.transmission_indicator = ttk.Label(transmission_frame, text="‚ö™", font=("Helvetica", 12))
        self.transmission_indicator.pack(side=tk.RIGHT, padx=5)
        
        # Vari√°veis para controle da transmiss√£o
        self.last_transmission_time = 0
        self.transmission_active = False
        
        # Frame de a√ß√µes
        actions_frame = ttk.LabelFrame(main_frame, text="A√ß√µes", padding=10)
        actions_frame.pack(fill=tk.X, pady=10)
        
        # Bot√£o de executar teste de template
        self.test_button = ttk.Button(actions_frame, text="Executar Teste de Template", command=self.run_template_test)
        self.test_button.pack(fill=tk.X, pady=5)
        
        # Bot√£o de executar teste com m√°scara
        self.masked_test_button = ttk.Button(actions_frame, text="Executar Teste com M√°scara", command=self.run_masked_test)
        self.masked_test_button.pack(fill=tk.X, pady=5)
        
        # √Årea de log
        log_frame = ttk.LabelFrame(main_frame, text="Log", padding=10)
        log_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        self.log_text = tk.Text(log_frame, height=10, wrap=tk.WORD)
        self.log_text.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)
        
        scrollbar = ttk.Scrollbar(log_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        scrollbar.pack(fill=tk.Y, side=tk.RIGHT)
        self.log_text.config(yscrollcommand=scrollbar.set)
    
    def log(self, message):
        """Adiciona uma mensagem √† √°rea de log"""
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        
        # Evitar duplica√ß√£o de mensagens espec√≠ficas no console
        if "TESTE CONCLU√çDO" not in message:
            print(message)  # Tamb√©m envia para o console
    
    def initialize_adb(self):
        """Inicializa e conecta ao ADB"""
        self.log("üì±üîå Inicializando conex√£o ADB...")
        
        # Desabilita os bot√µes enquanto conecta
        self.test_button.config(state="disabled")
        self.masked_test_button.config(state="disabled")
        
        try:
            # Reutiliza o singleton adb_manager em vez de criar uma nova inst√¢ncia
            global adb_manager
            
            if not adb_manager.is_connected():
                self.log("ADB n√£o conectado. Tentando conectar...")
                if not adb_manager.connect_first_device():
                    self.log("‚ùå Falha ao conectar ao dispositivo ADB via Manager.")
                    self.status_label.config(text="Falha na conex√£o")
                    self.device_label.config(text="Dispositivo: Nenhum")
                    
                    # Toca um som de alerta antes de mostrar o popup
                    try:
                        winsound.PlaySound("SystemExclamation", winsound.SND_ASYNC)
                    except Exception as sound_error:
                        self.log(f"Erro ao reproduzir som: {sound_error}")
                    
                    # Exibe mensagem amig√°vel informando que o emulador est√° fechado
                    messagebox.showerror("Emulador Fechado", "Teu emulador ta fechado pai!")
                    return False
            
            # Obt√©m o dispositivo conectado
            self.connected_device = adb_manager.get_device()
            if not self.connected_device:
                self.log("‚ùå ADBManager conectou, mas n√£o retornou um objeto de dispositivo.")
                self.status_label.config(text="Falha na conex√£o")
                self.device_label.config(text="Dispositivo: Nenhum")
                
                # Toca um som de alerta antes de mostrar o popup
                try:
                    winsound.PlaySound("SystemExclamation", winsound.SND_ASYNC)
                except Exception as sound_error:
                    self.log(f"Erro ao reproduzir som: {sound_error}")
                
                messagebox.showerror("Erro de Conex√£o", "N√£o foi poss√≠vel obter o objeto do dispositivo.")
                return False
            
            # Atualiza a interface
            device_serial = adb_manager.get_target_serial()
            # Removendo log duplicado - ADBManager j√° mostra essa mensagem
            self.status_label.config(text="Conectado")
            self.device_label.config(text=f"Dispositivo: {device_serial}")
            
            # Habilita os bot√µes de teste
            self.test_button.config(state="normal")
            self.masked_test_button.config(state="normal")
            
            # Atualiza o status da thread de captura
            if capture_thread and capture_thread.is_alive():
                self.capture_status_label.config(text="Thread de captura: Ativa")
                self.capture_fps_label.config(text=f"FPS: {TARGET_FPS}")
                
            # Reset flag de perda de conex√£o
            self.emulator_connection_lost = False
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Erro ao conectar: {e}")
            self.status_label.config(text="Erro")
            self.device_label.config(text="Dispositivo: Nenhum")
            
            # Toca um som de alerta antes de mostrar o popup
            try:
                winsound.PlaySound("SystemExclamation", winsound.SND_ASYNC)
            except Exception as sound_error:
                self.log(f"Erro ao reproduzir som: {sound_error}")
            
            # Mostra mensagem amig√°vel caso seja um erro de conex√£o ADB
            if "adb" in str(e).lower() or "connection" in str(e).lower() or "device" in str(e).lower():
                messagebox.showerror("G√änio", "Teu emulador ta fechado pai!")
            else:
                messagebox.showerror("Erro", f"Erro ao conectar: {e}")
                
            try:
                self.connect_button.config(state="normal")
            except:
                pass  # O bot√£o pode n√£o existir
                
            return False
            
    def on_emulator_connected(self, device_serial):
        """Callback chamado quando o emulador √© conectado/reconectado."""
        if not hasattr(self, 'root') or not self.root.winfo_exists():
            return  # Janela foi fechada
            
        # Executa opera√ß√µes na thread do Tkinter
        self.root.after(0, lambda: self._handle_emulator_connected(device_serial))
    
    def _handle_emulator_connected(self, device_serial):
        """Manipula o evento de conex√£o do emulador na thread da interface gr√°fica."""
        if self.emulator_connection_lost:
            self.log(f"üì±‚úÖ Emulador reconectado! Serial: {device_serial}")
            self.status_label.config(text="Reconectado")
            self.device_label.config(text=f"Dispositivo: {device_serial}")
            
            # Habilita os bot√µes
            self.test_button.config(state="normal")
            self.masked_test_button.config(state="normal")
            
            # Tenta reiniciar a thread de captura se n√£o estiver rodando
            global capture_thread, stop_capture_thread
            if (not capture_thread or not capture_thread.is_alive()) and not stop_capture_thread:
                self.log("üì±üì∑ Tentando reiniciar a thread de captura...")
                try:
                    # Obt√©m o dispositivo conectado novamente
                    self.connected_device = adb_manager.get_device()
                    if self.connected_device:
                        username = self.html_id if self.html_id else None
                        start_screenshot_capture(TARGET_FPS, self.connected_device, username=username)
                        self.capture_status_label.config(text="Thread de captura: Ativa")
                        self.capture_fps_label.config(text=f"FPS: {TARGET_FPS}")
                        self.log("üì∑‚úÖ Thread de captura reiniciada!")
                except Exception as e:
                    self.log(f"‚ùå Erro ao reiniciar thread de captura: {e}")
            
            # Reset flag
            self.emulator_connection_lost = False
    
    def on_emulator_disconnected(self):
        """Callback chamado quando o emulador √© desconectado."""
        if not hasattr(self, 'root') or not self.root.winfo_exists():
            return  # Janela foi fechada
            
        # Executa opera√ß√µes na thread do Tkinter
        self.root.after(0, self._handle_emulator_disconnected)
    
    def _handle_emulator_disconnected(self):
        """Manipula o evento de desconex√£o do emulador na thread da interface gr√°fica."""
        self.log("üì±‚ùå Emulador desconectado!")
        self.status_label.config(text="Desconectado", foreground="red")
        self.device_label.config(text="Dispositivo: Nenhum")
        
        # Desabilita os bot√µes
        self.test_button.config(state="disabled")
        self.masked_test_button.config(state="disabled")
        
        # Toca som de alerta
        try:
            winsound.PlaySound("SystemExclamation", winsound.SND_ASYNC)
        except Exception as sound_error:
            self.log(f"Erro ao reproduzir som: {sound_error}")
        
        # Mostra popup informando que o emulador foi fechado
        try:
            # Verifica se o popup j√° est√° sendo exibido
            if not self.emulator_connection_lost:
                self.root.after(100, lambda: messagebox.showwarning("Emulador Fechado", 
                                                            "Emulador foi fechado ou desconectado!\n" +
                                                            "Reabra o emulador para continuar."))
        except Exception as e:
            self.log(f"Erro ao mostrar popup: {e}")
            
        # Define flag de perda de conex√£o
        self.emulator_connection_lost = True
    
    def run_template_test(self):
        """Executa o teste de template do m√≥dulo template.py"""
        self.log("Iniciando teste de template...")
        
        # Desabilita o bot√£o durante o teste
        self.test_button.config(state="disabled")
        
        # Executa o teste em uma thread separada para n√£o travar a UI
        threading.Thread(target=self._run_test_thread, daemon=True).start()
    
    def _run_test_thread(self):
        """Fun√ß√£o que roda o teste em thread separada"""
        try:
            # Usa o conte√∫do existente da √°rea de log
            
            # Executa a fun√ß√£o run_test do m√≥dulo template.py em modo silencioso
            # (para evitar duplica√ß√£o de mensagens no console)
            result = run_test(silent=True)
            
            # Atualiza a interface com o resultado
            if result:
                self.log("‚úÖ TESTE CONCLU√çDO: Template encontrado com sucesso!")
            else:
                self.log("‚ùå TESTE CONCLU√çDO: Template n√£o encontrado.")
        
        except Exception as e:
            self.log(f"‚ùå Erro durante o teste: {e}")
        
        finally:
            # Habilita o bot√£o novamente
            self.root.after(0, lambda: self.test_button.config(state="normal"))

    def run_masked_test(self):
        """Executa o teste com m√°scara do m√≥dulo testnew.py"""
        # Verifica se est√° conectado
        if not self.connected_device:
            messagebox.showerror("Erro", "N√£o h√° dispositivo conectado! Conecte um dispositivo Android primeiro.")
            return
            
        self.log("Iniciando teste com m√°scara...")
        
        # Desabilita o bot√£o durante o teste
        self.masked_test_button.config(state="disabled")
        
        # Executa o teste em uma thread separada para n√£o travar a UI
        threading.Thread(target=self._run_masked_test_thread, daemon=True).start()
    
    def _run_masked_test_thread(self):
        """Fun√ß√£o que roda o teste com m√°scara em thread separada"""
        try:
            # Executa a fun√ß√£o execute_masked_test do m√≥dulo testnew.py
            result = execute_masked_test()
            
            # Atualiza a interface com o resultado
            if result:
                self.log("‚úÖ TESTE COM M√ÅSCARA CONCLU√çDO: Template encontrado com sucesso!")
            else:
                self.log("‚ùå TESTE COM M√ÅSCARA CONCLU√çDO: Template n√£o encontrado.")
        
        except Exception as e:
            self.log(f"‚ùå Erro durante o teste com m√°scara: {e}")
        
        finally:
            # Habilita o bot√£o novamente
            self.root.after(0, lambda: self.masked_test_button.config(state="normal"))
            
    def update_capture_status(self):
        """Atualiza o status da captura na interface a cada segundo"""
        global capture_thread, screenshot_queue, TARGET_FPS, state_manager
        
        try:
            # Atualiza status da thread de captura
            if capture_thread and capture_thread.is_alive():
                self.capture_status_label.config(text="Thread de captura: Ativa")
                self.capture_fps_label.config(text=f"FPS: {TARGET_FPS} (Fila: {screenshot_queue.qsize()})")
            else:
                self.capture_status_label.config(text="Thread de captura: Inativa")
                self.capture_fps_label.config(text="FPS: --")
            
            # Atualiza informa√ß√µes do estado atual do jogo
            if state_manager is not None:
                current_state = state_manager.get_current_state()
                state_duration = state_manager.get_state_duration()
                
                # Atualiza as labels com informa√ß√µes do estado
                self.state_label.config(text=f"Estado atual: {current_state}")
                self.state_time_label.config(text=f"Tempo no estado: {state_duration:.1f}s")
        except Exception as e:
            print(f"Erro ao atualizar status: {e}")
            
        # Programa a pr√≥xima atualiza√ß√£o
        self.root.after(1000, self.update_capture_status)
        
    def on_state_change(self, previous_state, new_state):
        """Callback chamado quando o estado do jogo muda"""
        self.log(f"‚ö° Estado alterado: {previous_state} -> {new_state}")
        
    def update_transmission_status(self):
        """Atualiza o status da transmiss√£o na GUI - chamado pelo transmitter"""
        if not hasattr(self, 'transmission_indicator'):
            return
            
        current_time = time.time()
        self.last_transmission_time = current_time
        
        if not self.transmission_active:
            self.transmission_active = True
            self.transmission_status_label.config(text="Transmiss√£o: Ativa", foreground="green")
            self.transmission_indicator.config(text="üü¢")  # C√≠rculo verde
            
            # Programa a verifica√ß√£o de timeout ap√≥s 2 segundos
            self.root.after(2000, self.check_transmission_timeout)
    
    def check_transmission_timeout(self):
        """Verifica se a transmiss√£o est√° inativa h√° mais de 2 segundos"""
        current_time = time.time()
        if current_time - self.last_transmission_time > 2 and self.transmission_active:
            self.transmission_active = False
            self.transmission_status_label.config(text="Transmiss√£o: Inativa", foreground="gray")
            self.transmission_indicator.config(text="‚ö™")  # C√≠rculo cinza
        
        # Continua verificando enquanto o aplicativo estiver em execu√ß√£o
        if hasattr(self, 'root') and self.root.winfo_exists():
            self.root.after(2000, self.check_transmission_timeout)

# Fun√ß√£o para inicializar o gerenciador de estados
def initialize_state_manager():
    """Inicializa o gerenciador de estados e inicia o monitoramento"""
    global state_manager, screenshot_queue
    
    try:
        # Cria uma inst√¢ncia do StateManager com configura√ß√µes ajustadas
        state_manager = StateManager(threshold=0.75, check_interval=0.2, verbose=False)
        
        # Inicia o monitoramento de estados usando a fila de screenshots existente
        if screenshot_queue is not None:
            state_manager.start_monitoring(screenshot_queue)
            print("üîî‚úÖ StateManager inicializado e monitoramento iniciado.")
            return True
        else:
            print("‚ùå Erro: Fila de screenshots n√£o inicializada. StateManager n√£o pode ser inicializado.")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao inicializar StateManager: {e}")
        return False
        
# Fun√ß√£o para iniciar a captura de screenshots com username
def start_screenshot_capture(fps, device, username=None):
    """Inicia a captura de screenshots em thread separada."""
    global capture_thread, stop_capture_thread
    
    # Para a thread anterior se existir
    if capture_thread and capture_thread.is_alive():
        stop_capture_thread = True
        capture_thread.join(timeout=2.0)
        stop_capture_thread = False
    
    # Inicia nova thread
    capture_thread = threading.Thread(
        target=capture_worker,
        args=(fps, device, username),
        daemon=True
    )
    capture_thread.start()
    return capture_thread

# --- Fun√ß√£o Principal ---
def show_emulator_closed_message():
    """Mostra uma mensagem amig√°vel com GIF animado quando o emulador est√° fechado e toca um som."""
    # Toca o som de alerta antes de mostrar a mensagem
    try:
        winsound.PlaySound("SystemExclamation", winsound.SND_ASYNC)
    except Exception as sound_error:
        print(f"Erro ao reproduzir som: {sound_error}")
    
    # Cria uma janela customizada para mostrar o GIF e a mensagem
    root = tk.Tk()
    root.title("G√äNIO")
    root.geometry("400x320")
    root.resizable(False, False)
    
    # Centraliza a janela na tela
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    x = (screen_width - 400) // 2
    y = (screen_height - 320) // 2
    root.geometry(f"400x320+{x}+{y}")
    
    # Configura o estilo
    root.configure(bg="#f0f0f0")
    style = ttk.Style()
    style.configure("TButton", font=("Helvetica", 12))
    style.configure("TLabel", font=("Helvetica", 14), background="#f0f0f0")
    
    # Frame principal
    main_frame = ttk.Frame(root, padding=10)
    main_frame.pack(fill=tk.BOTH, expand=True)
    
    # Carrega o GIF (verificamos se o arquivo existe)
    gif_path = os.path.join(project_root, "china.gif")
    if os.path.exists(gif_path):
        # Cria um objeto para armazenar os frames do GIF
        frames = []
        try:
            # Tenta carregar o GIF
            gif = Image.open(gif_path)
            # Extrai todos os frames
            try:
                while True:
                    frames.append(ImageTk.PhotoImage(gif.copy()))
                    gif.seek(len(frames)) # Vai para o pr√≥ximo frame
            except EOFError:
                pass # Fim dos frames
                
            # Cria um label para exibir o GIF
            gif_label = ttk.Label(main_frame)
            gif_label.pack(pady=10)
            
            # Fun√ß√£o para animar o GIF
            def update_frame(idx):
                frame = frames[idx]
                gif_label.configure(image=frame)
                root.after(100, update_frame, (idx + 1) % len(frames))
            
            # Inicia a anima√ß√£o
            if frames:
                root.after(0, update_frame, 0)
                
        except Exception as e:
            print(f"Erro ao carregar o GIF: {e}")
            # Usa um texto simples se o GIF n√£o puder ser carregado
            ttk.Label(main_frame, text="[üò± GIF Indispon√≠vel]")\
                .pack(pady=20)
    else:
        # Se o arquivo n√£o existir, mostra um texto alternativo
        ttk.Label(main_frame, text="[üò± GIF Indispon√≠vel]")\
            .pack(pady=20)
    
    # Adiciona a mensagem
    ttk.Label(main_frame, text="Teu emulador ta fechado pai!", 
               font=("Helvetica", 14, "bold"))\
        .pack(pady=10)
    ttk.Label(main_frame, text="Abra o emulador antes de iniciar o bot.")\
        .pack(pady=5)
    
    # Bot√£o de fechar
    ttk.Button(main_frame, text="Entendi, vou abrir!", command=root.destroy)\
        .pack(pady=15)
    
    # Configura a janela para se fechar ao pressionar Esc ou Enter
    root.bind("<Escape>", lambda event: root.destroy())
    root.bind("<Return>", lambda event: root.destroy())
    
    # Coloca a janela em primeiro plano
    root.attributes("-topmost", True)
    root.update()
    root.attributes("-topmost", False)
    
    # Inicia o loop principal
    root.mainloop()

def main():
    global capture_thread, stop_capture_thread
    
    print("üåü--- Iniciando HayDay Test Tool ---üåü")
    
    # Autentica usu√°rio pelo Supabase
    print("üîê Iniciando autentica√ß√£o...")
    user_data = start_login_window()
    
    # Verificar se o usu√°rio foi autenticado
    if not user_data:
        print("‚ùå Autentica√ß√£o falhou ou foi cancelada. Encerrando aplica√ß√£o.")
        return
    
    print(f"‚úÖ Usu√°rio {user_data.get('username')} autenticado com sucesso!")
    
    # L√™ o FPS do config carregado pelo screenshotMain
    target_fps = screenshot_config.get("target_fps", 1)
    print(f"‚öôÔ∏è Configura√ß√µes: FPS={target_fps} (do screenshotCFG.json)")
    
    try:
        # 1. Inicializa e conecta o ADBManager
        if not adb_manager.connect_first_device():
            print("üö® Falha cr√≠tica ao conectar ao dispositivo. Encerrando.")
            # Mostra o popup com mensagem amig√°vel antes de encerrar
            show_emulator_closed_message()
            return  # Usamos return em vez de sys.exit para um encerramento mais limpo

        # 2. Obt√©m o dispositivo conectado
        connected_device = adb_manager.get_device()
        if not connected_device:
            print("üö® Falha cr√≠tica: Conex√£o OK, mas sem objeto de dispositivo. Encerrando.")
            # Mostra o popup com mensagem amig√°vel antes de encerrar
            show_emulator_closed_message()
            return  # Usamos return em vez de sys.exit para um encerramento mais limpo

        # ADBManager j√° registra a conex√£o bem-sucedida, n√£o precisamos duplicar

        # 3. Cria e inicia a thread de captura, passando o dispositivo e identifica√ß√£o do usu√°rio
        username = user_data.get('username')
        html_id = user_data.get('html_id')  # Pega o html_id retornado pelo Supabase
        
        # Se n√£o tiver html_id, usa o username como fallback
        screen_id = html_id if html_id else f"screen-{username}"
        print(f"üíªüìÅ Identificador de tela para transmiss√£o: {screen_id}")
        
        # Inicia a thread de captura com o identificador correto
        capture_thread = threading.Thread(target=capture_worker, args=(target_fps, connected_device, screen_id), daemon=True)
        capture_thread.start()
        print(f"üì∑‚ú® Thread de captura iniciada (FPS={target_fps})")
    
        # 4. Cria a janela principal da interface gr√°fica
        root = tk.Tk()
        app = HayDayTestApp(root, user_data)

        # Configura o monitoramento proativo do ADB
        setup_adb_monitor_in_app(app)        
        # Configura o monitoramento proativo do ADB
        setup_adb_monitor_in_app(app)
        
        # 5. Inicializa o gerenciador de estados
        if initialize_state_manager():
            # Registra o callback de mudan√ßa de estado
            state_manager.register_state_change_callback(app.on_state_change)
            print("üîî‚úÖ Registro de callback de estado conclu√≠do.")
        
        # 6. Configura o callback de transmiss√£o na GUI para indicar transmiss√µes
        from screenVision.transmitter import transmitter
        transmitter.set_transmission_callback(app.update_transmission_status)
        
        # 7. Configura a atualiza√ß√£o do status da captura e do estado a cada segundo
        app.update_capture_status()
        
        # Configura o fechamento da janela para usar nossa fun√ß√£o on_closing
        root.protocol("WM_DELETE_WINDOW", lambda: on_closing(root))
        
        # Inicia o loop principal da interface gr√°fica
        root.mainloop()
        
    except KeyboardInterrupt:
        print("\nMAIN: Interrup√ß√£o solicitada (Ctrl+C).")
    except Exception as e:
        print(f"Erro inesperado: {e}")
    finally:
        # Garante que a thread seja sinalizada para parar e espera por ela
        print("üíª‚õî MAIN: Sinalizando para thread de captura parar...")
        stop_capture_thread = True
        
        # Para o monitoramento de estados
        if state_manager is not None:
            print("üíª‚èπÔ∏è MAIN: Parando monitoramento de estados...")
            state_manager.stop_monitoring()
        
        if capture_thread and capture_thread.is_alive():
            print("üíª‚è∏Ô∏è MAIN: Aguardando a thread de captura encerrar...")
            capture_thread.join(timeout=3)  # Aumenta um pouco o timeout
            if capture_thread.is_alive():
                print("üíª‚ö†Ô∏è MAIN: Thread de captura n√£o terminou a tempo.")
                
        print("üíª‚ú® MAIN: Programa encerrado.")

# Fun√ß√£o chamada quando a janela principal √© fechada
def on_closing(root):
    """Trata o fechamento da janela principal"""
    global stop_capture_thread, state_manager
    
    print("üíªüîí MAIN: Aplicativo est√° sendo fechado...")

    # Para o monitoramento de conex√£o ADB
    cleanup_adb_monitor_on_exit()
    
    # Para a thread de captura
    stop_capture_thread = True
    
    # Para o monitoramento de estados
    if state_manager is not None:
        print("üíª‚èπÔ∏è MAIN: Parando monitoramento de estados...")
        state_manager.stop_monitoring()
    
    # Destr√≥i a janela e encerra o programa
    root.destroy()
    print("üíªüö´ MAIN: Interface encerrada.")

# --- Ponto de entrada ---
if __name__ == "__main__":
    main()